# docker-compose.yml
# Docker Compose configuration for Agentic Data Explorer

version: '3.8'

services:
  # Backend API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentic-data-explorer-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - API_PORT=8000
      - LOG_LEVEL=INFO
      - LOCAL_AI_HOST=ollama
      - LOCAL_AI_PORT=11434
      - MAX_QUERY_TIMEOUT=120
      - LOCAL_AI_TIMEOUT_SECONDS=90
    env_file:
      - .env
    depends_on:
      - ollama
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - agentic-network

  # Streamlit Frontend Service
  frontend:
    build:
      context: ./frontend/streamlit
      dockerfile: Dockerfile
    container_name: agentic-data-explorer-frontend
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://api:8000/api/v1
    depends_on:
      - api
    volumes:
      - ./frontend/streamlit:/app
    restart: unless-stopped
    networks:
      - agentic-network

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    container_name: agentic-data-explorer-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./scripts/setup_ollama.sh:/setup_ollama.sh
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - agentic-network
    # Uncomment if you have GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: agentic-data-explorer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    networks:
      - agentic-network

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-data-explorer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - agentic-network

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-data-explorer-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - agentic-network

volumes:
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  agentic-network:
    driver: bridge

